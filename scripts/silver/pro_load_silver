/*
Stored Procedure: Load Silver Layer (Bronze -> Silver)
===============================================================================
Script Purpose:
    This stored procedure performs the ETL (Extract, Transform, Load) process to 
    populate the 'silver' schema tables from the 'bronze' schema.
	Actions Performed:
		- Truncates Silver tables.
		- Inserts transformed and cleansed data from Bronze into Silver tables.
*/
create or alter procedure load_silver as
begin
    
    declare @start_load datetime ,@end_load datetime ,@start_batch_load datetime,@end_batch_load datetime 
	begin try
	    PRINT '================================================';
		PRINT 'Loading silver Layer';
		PRINT '================================================';
	
		
		set @start_batch_load =GETDATE();

		set @start_load =GETDATE();
		PRINT '>> Truncating Table: silver.crm_cust_info';
		TRUNCATE TABLE silver.crm_cust_info;
		PRINT '>> Inserting Data Into: silver.crm_cust_info';
		insert into silver.crm_cust_info(
		cst_id,
		cst_key,
		cst_firstname,
		cst_lastname,
		cst_marital_status,
		cst_gndr,
		cst_create_date
		)
		select
		cst_id ,
		cst_key ,
		trim(cst_firstname) as cst_firstname ,
		trim(cst_lastname) as cst_lastname,
		case when cst_marital_status ='S' then 'Single'
			 when cst_marital_status ='M' then 'Married'
			 else 'n/a'
		end cst_marital_status,
		case when trim(upper( cst_gndr)) ='F' then 'Female' 
			 when trim(upper( cst_gndr)) ='M' then 'Male'
			 else 'n/a'
		end cst_gndr,
		cst_create_date
		from (
		select * ,
		ROW_NUMBER () over (partition by cst_id order by cst_create_date desc) as flag
		from bronze.crm_cust_info
		where  cst_id is not null
		) as t 
		where flag = 1 ;
		set @end_load =GETDATE();
		PRINT '>> Load time: ' + CAST(DATEDIFF(second, @start_load, @end_load) AS NVARCHAR) + ' seconds';
		PRINT ' -------------';






		set @start_load =GETDATE();
		PRINT '>> Truncating Table: silver.crm_prd_info';
		TRUNCATE TABLE silver.crm_prd_info;
		PRINT '>> Inserting Data Into: silver.crm_prd_info'; 
		insert into silver.crm_prd_info(
		prd_id,
		cat_id,
		prd_key,
		prd_nm,
		prd_cost,
		prd_line,
		prd_start_dt,
		prd_end_dt
		)
		select 
		prd_id,
		replace(SUBSTRING(prd_key,1,5),'-','_') as cat_id,
		SUBSTRING(prd_key,7,LEN(prd_key)) as prd_key,
		prd_nm,
		isnull(prd_cost,0),

		case upper(trim(prd_line) )
			 when 'M' then 'Mountain'
			 when 'S' then 'Other Sales'
			 when 'R' then 'Road'
			 when 'T' then 'Touring'
			 else 'n/a'
		end as prd_line,
		cast(prd_start_dt as date) as prd_start_dt,
		cast (lead(prd_start_dt) over (partition by prd_key order by prd_start_dt )-1 as date) as prd_end_dt 
		from bronze.crm_prd_info
		set @end_load =GETDATE();
		PRINT '>> Load time: ' + CAST(DATEDIFF(second, @start_load, @end_load) AS NVARCHAR) + ' seconds';
		PRINT ' -------------';





		set @start_load =GETDATE();
		PRINT '>> Truncating Table: silver.crm_sales_details';
		TRUNCATE TABLE silver.crm_sales_details;
		PRINT '>> Inserting Data Into: silver.crm_sales_details'; 
		insert into silver.crm_sales_details(
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			sls_order_dt,
			sls_ship_dt,
			sls_due_dt,
			sls_sales ,
			sls_quantity,
			sls_price		
		)
		select 
		sls_ord_num ,
		sls_prd_key,
		sls_cust_id,
		case when sls_order_dt = 0 or len(sls_order_dt) != 8 Then Null
			 else cast(cast(sls_order_dt as nvarchar) as date)
		end as sls_order_dt,
		case when sls_ship_dt = 0 or len(sls_ship_dt) != 8 Then Null
			 else cast(cast(sls_ship_dt as nvarchar) as date)
		end as sls_ship_dt,
		case when sls_due_dt = 0 or len(sls_due_dt) != 8 Then Null
			 else cast(cast(sls_due_dt as nvarchar) as date)
		end as sls_due_dt,
		case when sls_sales != sls_quantity * abs(sls_price) or sls_sales <=0 or sls_sales is null
			 then sls_quantity * abs(sls_price)
			 else sls_sales
		end as sls_sales ,
		sls_quantity,
		case when sls_price <= 0 or  sls_price is null 
			 then sls_sales / nullif(sls_quantity,0)
			 else sls_price
		end as sls_price 
		from bronze.crm_sales_details
		set @end_load =GETDATE();
		PRINT '>> Load time: ' + CAST(DATEDIFF(second, @start_load, @end_load) AS NVARCHAR) + ' seconds';
		PRINT ' -------------';



		set @start_load =GETDATE();
		PRINT '>> Truncating Table: silver.erp_cust_az12 ';
		TRUNCATE TABLE silver.erp_cust_az12 ;
		PRINT '>> Inserting Data Into: silver.erp_cust_az12 '; 
		insert into silver.erp_cust_az12 (
		cid,
		bdate,
		gen
		)
		select 
		case when cid  like 'NAS%' then SUBSTRING(cid,5,len(cid))
			 else cid
		end as cid,
		case when bdate > GETDATE() then null
			 else bdate
		end as bdate,
		case when upper(trim(gen)) in ('F','FEMALE') then 'Female'
			 when upper(trim(gen)) in ('M','MALE') then 'Male'
			 else 'n/a'
		end as gen
		from bronze.erp_cust_az12
		set @end_load =GETDATE();
		PRINT '>> Load time: ' + CAST(DATEDIFF(second, @start_load, @end_load) AS NVARCHAR) + ' seconds';
		PRINT ' -------------';




		set @start_load =GETDATE();
		PRINT '>> Truncating Table: silver.erp_loc_a101 ';
		TRUNCATE TABLE silver.erp_loc_a101 ;
		PRINT '>> Inserting Data Into: silver.erp_loc_a101 '; 
		insert into silver.erp_loc_a101(
		cid,
		cntry
		)
		select 
		REPLACE(cid,'-','') cid ,
		case when trim(cntry) in ('SU','SUA') then 'United States'
			 when trim(cntry) = 'DE' then 'Germany'
			 when trim(cntry) is null or trim(cntry)='' then 'n/a'
			 else trim(cntry)
		end as cntry 
		from bronze.erp_loc_a101
		set @end_load =GETDATE();
		PRINT '>> Load time: ' + CAST(DATEDIFF(second, @start_load, @end_load) AS NVARCHAR) + ' seconds';
		PRINT ' -------------';





		set @start_load =GETDATE();
		PRINT '>> Truncating Table: silver.erp_px_cat_g1v2 ';
		TRUNCATE TABLE silver.erp_px_cat_g1v2 ;
		PRINT '>> Inserting Data Into: silver.erp_px_cat_g1v2 '; 
		insert into silver.erp_px_cat_g1v2(
		id , cat ,subcat ,maintenance
		)
		select * from bronze.erp_px_cat_g1v2
		set @end_load =GETDATE();
		PRINT '>> Load time: ' + CAST(DATEDIFF(second, @start_load, @end_load) AS NVARCHAR) + ' seconds';
		PRINT ' -------------';


		set @end_batch_load =GETDATE();
		PRINT '=========================================='
		PRINT 'Loading Silver Layer is Completed';
		PRINT '   - Total Load Duration: ' + CAST(DATEDIFF(SECOND, @start_batch_load, @end_batch_load) AS NVARCHAR) + ' seconds';
		PRINT '=========================================='
	end try
	begin catch
		 PRINT '=========================================='
		 PRINT 'ERROR OCCURED DURING LOADING BRONZE LAYER'
		 PRINT 'Error Message' + ERROR_MESSAGE();
		 PRINT 'Error Message' + CAST (ERROR_NUMBER() AS NVARCHAR);
		 PRINT 'Error Message' + CAST (ERROR_STATE() AS NVARCHAR);
		 PRINT '=========================================='
	end catch
end 



